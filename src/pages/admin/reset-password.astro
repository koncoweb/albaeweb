---
import Layout from '../../layouts/BlogPost.astro';
import { supabase } from '../../lib/supabase';

// Check if there's an existing session
const { data: { session } } = await supabase.auth.getSession();

// If already logged in, redirect to admin panel
if (session) {
  return Astro.redirect('/admin/products');
}
---

<Layout
  title="Reset Password | Albae Handicraft"
  description="Reset password admin"
  pubDate={new Date()}
>
  <div class="reset-password-container">
    <h1>Reset Password</h1>
    
    <div id="reset-form" class="form-container">
      <p class="instructions">
        Masukkan password baru Anda.
      </p>
      
      <form class="password-form">
        <div class="form-group">
          <label for="password">Password Baru</label>
          <input 
            type="password" 
            id="password" 
            name="password" 
            required 
            placeholder="Enter new password"
            minlength="8"
          />
        </div>

        <div class="form-group">
          <label for="confirm-password">Konfirmasi Password</label>
          <input 
            type="password" 
            id="confirm-password" 
            name="confirm-password" 
            required 
            placeholder="Confirm new password"
            minlength="8"
          />
        </div>

        <button type="submit" class="submit-button">Update Password</button>
      </form>
      
      <div id="message" class="message"></div>
    </div>
  </div>
</Layout>

<style>
  .reset-password-container {
    max-width: 400px;
    margin: 2rem auto;
    padding: 2rem;
    background: var(--color-surface);
    border-radius: 1rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  h1 {
    color: var(--color-primary);
    text-align: center;
    margin-bottom: 1rem;
  }

  .instructions {
    text-align: center;
    color: var(--color-text);
    margin-bottom: 2rem;
    line-height: 1.5;
  }

  .form-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .password-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  label {
    color: var(--color-text);
    font-weight: 500;
  }

  input {
    padding: 0.75rem;
    border: 2px solid var(--color-border);
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.3s;
  }

  input:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  input.error {
    border-color: #dc3545;
  }

  .submit-button {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: 1rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: opacity 0.3s;
  }

  .submit-button:hover {
    opacity: 0.9;
  }

  .submit-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .message {
    padding: 1rem;
    border-radius: 0.5rem;
    text-align: center;
    min-height: 1.5rem;
  }

  .message.success {
    background: #e6f4ea;
    color: #1e7e34;
  }

  .message.error {
    background: #fef1f2;
    color: #dc3545;
  }
</style>

<script>
  import { supabase } from '../../lib/supabase';

  const form = document.querySelector('.password-form') as HTMLFormElement;
  const message = document.getElementById('message');
  const password = document.getElementById('password') as HTMLInputElement;
  const confirmPassword = document.getElementById('confirm-password') as HTMLInputElement;
  const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;

  // Function to show message
  function showMessage(text: string, type: 'success' | 'error') {
    if (message) {
      message.textContent = text;
      message.className = `message ${type}`;
    }
  }

  // Function to validate passwords match
  function validatePasswords() {
    if (!password || !confirmPassword) return false;
    
    const isValid = password.value === confirmPassword.value;
    const hasMinLength = password.value.length >= 8;

    if (!hasMinLength) {
      showMessage('Password harus minimal 8 karakter.', 'error');
      return false;
    }

    if (!isValid) {
      showMessage('Password tidak cocok.', 'error');
      confirmPassword.classList.add('error');
    } else {
      message?.classList.remove('message', 'error');
      confirmPassword.classList.remove('error');
      message!.textContent = '';
    }

    if (submitButton) {
      submitButton.disabled = !isValid || !hasMinLength;
    }

    return isValid && hasMinLength;
  }

  // Add validation on input
  password?.addEventListener('input', validatePasswords);
  confirmPassword?.addEventListener('input', validatePasswords);

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!validatePasswords()) return;
    
    try {
      const { error } = await supabase.auth.updateUser({
        password: password.value
      });

      if (error) throw error;

      showMessage('Password berhasil diperbarui. Mengalihkan ke halaman login...', 'success');
      
      // Clear form
      form.reset();
      
      // Redirect to login after short delay
      setTimeout(() => {
        window.location.href = '/admin/login';
      }, 2000);

    } catch (error: any) {
      console.error('Password update error:', error);
      showMessage(
        error.message || 'Terjadi kesalahan saat memperbarui password.',
        'error'
      );
    }
  });

  // Initial validation
  validatePasswords();
</script>
