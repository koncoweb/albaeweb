---
import Layout from '../../../layouts/BlogPost.astro';
import { adminAuthMiddleware } from '../../../middleware/auth';

// Check authentication and admin role
const response = await adminAuthMiddleware({ request: Astro.request, redirect: Astro.redirect });
if (response) return response;
---

<Layout
  title="Add New Product | Albae Handicraft"
  description="Tambah produk baru"
  pubDate={new Date()}
>
  <div class="admin-container">
    <header class="admin-header">
      <h1>Add New Product</h1>
      <a href="/admin/products" class="back-button">Back to Products</a>
    </header>

    <form id="product-form" class="product-form">
      <div class="form-group">
        <label for="nama">Product Name*</label>
        <input 
          type="text" 
          id="nama" 
          name="nama" 
          required 
          placeholder="Enter product name"
        />
      </div>

      <div class="form-group">
        <label for="description">Description*</label>
        <textarea 
          id="description" 
          name="description" 
          required 
          rows="4"
          placeholder="Enter product description"
        ></textarea>
      </div>

      <div class="form-group">
        <label for="category">Category*</label>
        <input 
          type="text" 
          id="category" 
          name="category" 
          required 
          placeholder="Enter product category"
        />
      </div>

      <div class="form-group">
        <label for="material">Material*</label>
        <input 
          type="text" 
          id="material" 
          name="material" 
          required 
          placeholder="Enter product material"
        />
      </div>

      <div class="form-group">
        <label for="price">Price (Rp)*</label>
        <input 
          type="number" 
          id="price" 
          name="price" 
          required 
          min="0"
          placeholder="Enter product price"
        />
      </div>

      <div class="form-group">
        <label for="featured_image">Featured Image*</label>
        <input 
          type="file" 
          id="featured_image" 
          name="featured_image" 
          accept="image/*"
          required
        />
        <div id="image-preview" class="image-preview"></div>
      </div>

      <div class="form-group">
        <label class="checkbox-label">
          <input 
            type="checkbox" 
            id="active" 
            name="active" 
            checked
          />
          <span>Active (visible to public)</span>
        </label>
      </div>

      <div class="form-actions">
        <button type="submit" class="submit-button">Create Product</button>
        <a href="/admin/products" class="cancel-button">Cancel</a>
      </div>

      <div id="error-message" class="error-message"></div>
    </form>
  </div>
</Layout>

<style>
  .admin-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  h1 {
    color: var(--color-primary);
    margin: 0;
  }

  .back-button {
    color: var(--color-text);
    text-decoration: none;
    font-weight: 500;
  }

  .product-form {
    background: var(--color-surface);
    padding: 2rem;
    border-radius: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  label {
    color: var(--color-text);
    font-weight: 500;
  }

  input[type="text"],
  input[type="number"],
  textarea {
    padding: 0.75rem;
    border: 2px solid var(--color-border);
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.3s;
  }

  input:focus,
  textarea:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
  }

  .image-preview {
    margin-top: 1rem;
    max-width: 300px;
  }

  .image-preview img {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }

  .submit-button,
  .cancel-button {
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: opacity 0.3s;
    text-align: center;
  }

  .submit-button {
    background: var(--color-primary);
    color: white;
    border: none;
    flex: 1;
  }

  .cancel-button {
    background: var(--color-surface);
    color: var(--color-text);
    border: 2px solid var(--color-border);
    text-decoration: none;
  }

  .submit-button:hover,
  .cancel-button:hover {
    opacity: 0.9;
  }

  .error-message {
    color: #ff4444;
    text-align: center;
    min-height: 1.5rem;
  }

  @media (max-width: 768px) {
    .admin-container {
      padding: 1rem;
    }

    .admin-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .product-form {
      padding: 1rem;
    }
  }
</style>

<script>
  import { supabase, productService } from '../../../lib/supabase';
  
  const form = document.getElementById('product-form') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message');
  const imagePreview = document.getElementById('image-preview');

  // Handle image preview
  const imageInput = document.getElementById('featured_image') as HTMLInputElement;
  imageInput?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file && imagePreview) {
      const reader = new FileReader();
      reader.onload = (e) => {
        imagePreview.innerHTML = `<img src="${e.target?.result}" alt="Preview" />`;
      };
      reader.readAsDataURL(file);
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (errorMessage) errorMessage.textContent = '';

    try {
      const formData = new FormData(form);
      const imageFile = formData.get('featured_image') as File;

      // Upload image to Supabase Storage
      const fileExt = imageFile.name.split('.').pop();
      const filePath = `products/${Date.now()}.${fileExt}`;
      
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('product-images')
        .upload(filePath, imageFile);

      if (uploadError) throw uploadError;

      // Get public URL for the uploaded image
      const { data: { publicUrl } } = supabase.storage
        .from('product-images')
        .getPublicUrl(filePath);

      // Create product with image URL
      const productData = {
        nama: formData.get('nama'),
        description: formData.get('description'),
        category: formData.get('category'),
        material: formData.get('material'),
        price: Number(formData.get('price')),
        featured_image: publicUrl,
        active: formData.get('active') === 'on',
        slug: formData.get('nama')?.toString().toLowerCase()
          .replace(/ /g, '-')
          .replace(/[^\w-]+/g, '')
      };

      await productService.create(productData);
      
      // Redirect back to products list
      window.location.href = '/admin/products';
      
    } catch (error: any) {
      if (errorMessage) {
        errorMessage.textContent = error.message || 'Error creating product';
      }
    }
  });
</script>
